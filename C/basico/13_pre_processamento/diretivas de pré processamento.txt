# üìå Diretivas de pr√©-processamento:

S√£o instru√ß√µes executadas antes da compila√ß√£o em linguagens como C/C++. Elas permitem definir
constantes, incluir arquivos, criar macros e controlar condicionalmente a compila√ß√£o de trechos
de c√≥digo, pois, como elas vem antes do processamento do c√≥digo, faz com que a compila√ß√£o seja
essencial. E al√©m disso, √© poss√≠vel usar flags(sinalizadores) na linha de comando do terminal
para modificar o comportamento da compila√ß√£o conforme a necessidade do desenvolvedor.

============================================================================================

‚öô Compila√ß√£o 
A compila√ß√£o √© o ato/processo de transformar um programa escrito em linguagem de alto n√≠vel
(como C/C++) em c√≥digo de m√°quina, execut√°vel pelo processador. Funcionando do seguintes passos:

1¬∫ Pr√©-processamento (Juntar linhas que foram separadas por sequ√™ncias de escape; Remove
coment√°rios e os substitui por espa√ßos em branco; Expande macros; Processa diretivas de
pr√©-processamento (geralmente orienta√ß√µes ao compilador)).

2¬∫ An√°lise lexicogr√°fica: Nesta etapa, o compilador verifica os tokens do c√≥digo, ou seja,
as menores unidades significativas (como palavras-chave, operadores, identificadores, etc.).
O compilador converte o c√≥digo em uma sequ√™ncia de tokens que ser√£o mais facilmente analisados
nas etapas seguintes.

3¬∫ An√°lise Sint√°tica: Verifica se os tokens e express√µes formam estruturas v√°lidas da
linguagem (verificando erros como par√™nteses ou chaves mal colocadas).

4¬∫ An√°lise Sem√¢ntica: Valida o significado do c√≥digo (ex: uso de vari√°veis antes da declara√ß√£o,
n√∫mero de argumentos de uma fun√ß√£o, etc.).

5¬∫ Gerar c√≥digo intermedi√°rio: O compilador gera um c√≥digo intermedi√°rio, muitas vezes
representado por arquivos .o ou .obj (objetos), que pode ser otimizado e convertido em
c√≥digo de m√°quina.

6¬∫ Otimiza√ß√£o do c√≥digo: Melhora o desempenho do c√≥digo: reduz o uso de mem√≥ria, melhora loops,
organiza aloca√ß√£o de mem√≥ria das vari√°veis, etc, C/C++ s√£o conhecidas como linguagens muito veloz
em sua habilidade de compilar.

7¬∫ Gera√ß√£o de C√≥digo Objeto: Produz um c√≥digo espec√≠fico para a arquitetura de destino (ex: x86, ARM, SPARC).

8¬∫ Gera√ß√£o de C√≥digo de M√°quina e Linker: linker (ligador) √© respons√°vel por juntar todos
os arquivos objeto e bibliotecas, resolvendo refer√™ncias entre eles, e gerando o execut√°vel
final. O linker substitui as refer√™ncias a fun√ß√µes e vari√°veis pelos endere√ßos reais na mem√≥ria.
O resultado √© o arquivo de execu√ß√£o (programa.exe ou programa.out).

Refer√™ncia: https://pt.stackoverflow.com/questions/63193/o-que-significa-compilar
===================================================================================

Como compilar um arquivo C/C++
No terminal de seu Sistema Operacional, estando no caminho(diret√≥rio) do arquivo principal ".c"
> "C:\\Users\\EDUARDO_OLIVEIRA\\Documents\\aprendendoC\\C\\basico\\13_pre_processamento"
> gcc nomeDoArquivo.c -o nomeParaArquivoExecutavel
ou
> gcc -o nomeParaArquivoExecutavel nomeDoArquivo.c
> .\nomeParaArquivoExecutavel.exe

Estes passos geram e executa o arquivo execut√°vel dentro do terminal.
‚Ä¢ gcc ou g++: S√£o os compiladores para C(gcc) e C++(g++), respectivamente.
‚Ä¢ arquivo.c ou arquivo.cpp: √â o arquivo de c√≥digo-fonte que voc√™ deseja compilar.
‚Ä¢ -o arquivo: Especifica o nome do arquivo de sa√≠da.

===================================================================================

Para gerar o arquivo objeto(.o) da mesma maneira descrita para arquivo execut√°vel.
> "C:\\Users\\EDUARDO_OLIVEIRA\\Documents\\aprendendoC\\C\\basico\\13_pre_processamento"
> gcc -c arquivo.c -o arquivo.o

‚Ä¢ -c: Flag que compila o c√≥digo-fonte sem gerar o execut√°vel, apenas o (.o).

===================================================================================

‚ö† CUIDADOS: Diret√≥rios(pastas) e Arquivos principalmente em C/C++ tem uma sensibilidade
na nomea√ß√£o de seus arquivos os nomes dos arquivos n√£o devem conter espa√ßos. Prefira formatos
como (arquivo_c.c) ou (arquivoC.c).
Pois no momento de compilar no terminal e caso se estiver (gcc arquivo c.c -o nome) o compilador
poder√° entender que h√° 2 arquivos a ser compilados, no caso "arquivo"(pode n√£o ter uma extens√£o,
mas √© entendido como arquivo.txt) e "c.c", gerando erro no processo de compila√ß√£o.

‚ö† E aten√ß√£o ao usar -o nome: Certifique-se o nome do arquivo de sa√≠da para que n√£o sobrescreva
outro arquivo importante j√° existente no sistema ou c√≥digo fonte.
-----------------------------------

OBS.: O processo de compila√ß√£o √© composto por diversas etapas, cada uma com papel fundamental na
transforma√ß√£o do c√≥digo-fonte em um programa execut√°vel. Com o uso adequado de diretivas e flags
(que ainda h√° muitas a ser explorada), podemos est√° otimizando, condicionando e modulando
seu c√≥digo conforme necess√°rio.
-----------------------------------

IMPORTANTE: Dominar ponteiros, diretivas de pr√©-processamento e compila√ß√£o √© essencial para
qualquer desenvolvedor C/C++. E tendo o Linux como Sistema Operacional, esse aprendizado se
intensifica ainda mais, tendo diretamente acesso ao c√≥digo de m√°quina, flags para visualizar
a linguagem assembly, aproximando voc√™ do verdadeiro poder da programa√ß√£o de baixo n√≠vel,
apesar do Windows ter ferramentas para isso, Linux √© mais convencional.
