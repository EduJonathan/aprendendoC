# üìå Diretivas de pr√©-processamento:

- S√£o instru√ß√µes executadas antes da compila√ß√£o em linguagens como C/C++. Elas permitem definir
constantes, incluir arquivos, criar macros e controlar condicionalmente a compila√ß√£o de trechos
de c√≥digo, pois, como elas vem antes do processamento do c√≥digo, faz com que a compila√ß√£o seja
essencial.

- E al√©m disso, √© poss√≠vel usar flags(sinalizadores) na linha de comando do terminal
para modificar o comportamento da compila√ß√£o conforme a necessidade do desenvolvedor.

============================================================================================

** ‚öô Compila√ß√£o **

A compila√ß√£o √© o ato/processo de transformar um programa escrito em linguagem de alto n√≠vel
(como C/C++) em c√≥digo de m√°quina, execut√°vel pelo processador. Funcionando do seguintes passos:

1¬∫ Pr√©-processamento 
- (Juntar linhas que foram separadas por sequ√™ncias de escape; Remove coment√°rios e os substitui
por espa√ßos em branco; Expande macros; Processa diretivas de pr√©-processamento (geralmente
orienta√ß√µes ao compilador)).

2¬∫ An√°lise lexicogr√°fica
- Nessa etapa, o compilador converte o c√≥digo em uma sequ√™ncia de tokens, que s√£o as menores
unidades de significado do c√≥digo (como palavras-chave, operadores, identificadores, etc.). 
- Esses tokens s√£o analisados para verificar a corre√ß√£o do c√≥digo de acordo com a sintaxe da linguagem.

3¬∫ An√°lise Sint√°tica
- Verifica se os tokens e express√µes formam estruturas v√°lidas da linguagem (verificando erros
como par√™nteses ou chaves mal colocadas).

4¬∫ An√°lise Sem√¢ntica
- Valida o significado do c√≥digo (ex: uso de vari√°veis antes da declara√ß√£o, n√∫mero de argumentos 
de uma fun√ß√£o, etc.).

5¬∫ Gerar c√≥digo intermedi√°rio
- O c√≥digo gerado at√© aqui √© transformado em um c√≥digo intermedi√°rio (geralmente
arquivos .o ou .obj), que √© independente de m√°quina. O c√≥digo intermedi√°rio √© uma representa√ß√£o
otimizada do c√≥digo-fonte, mas ainda n√£o pode ser executado diretamente. Esse arquivo ser√°
utilizado na etapa de linkagem.

6¬∫ Otimiza√ß√£o do c√≥digo
- O c√≥digo intermedi√°rio passa por uma otimiza√ß√£o para melhorar seu desempenho. O compilador 
pode reorganizar loops, remover c√≥digo redundante e realizar outras modifica√ß√µes que resultam 
em um c√≥digo mais eficiente. As flags de otimiza√ß√£o como -O2 ou -O3 podem ser usadas para ativar
esse processo, que visa reduzir o uso de mem√≥ria e aumentar a velocidade de execu√ß√£o do programa.

7¬∫ Gera√ß√£o de C√≥digo Objeto
- O c√≥digo intermedi√°rio √© ent√£o traduzido para um c√≥digo objeto geralmente arquivos 
(".o" ou ".obj"), que √© espec√≠fico para a arquitetura do processador de destino
(por exemplo, x86, ARM). Este c√≥digo n√£o √© execut√°vel ainda, mas cont√©m o c√≥digo bin√°rio
que a m√°quina pode entender.

8¬∫ Gera√ß√£o de C√≥digo de M√°quina e Linker:
- O linker √© o respons√°vel por juntar os arquivos objeto gerados (e tamb√©m bibliotecas) e
resolver as refer√™ncias entre fun√ß√µes e vari√°veis.Durante a linkagem, o linker substitui 
as refer√™ncias simb√≥licas por endere√ßos reais de mem√≥ria. O arquivo gerado no final
√© o execut√°vel(programa.exe ou programa.out).

REFER√äNCIA: https://pt.stackoverflow.com/questions/63193/o-que-significa-compilar
===================================================================================

üë®üèª‚Äçüíª Como compilar um arquivo C/C++

No terminal de seu Sistema Operacional, estando no caminho(diret√≥rio) do arquivo principal ".c"

> "C:\\Users\\EDUARDO_OLIVEIRA\\Documents\\aprendendoC\\C\\basico\\13_pre_processamento"
> gcc nomeDoArquivo.c -o nomeParaArquivoExecutavel
ou
> gcc -o nomeParaArquivoExecutavel nomeDoArquivo.c
> .\nomeParaArquivoExecutavel.exe

Estes passos geram e executa o arquivo execut√°vel dentro do terminal.

‚Ä¢ gcc ou g++: S√£o os compiladores para C(gcc) e C++(g++), respectivamente.
‚Ä¢ arquivo.c ou arquivo.cpp: √â o arquivo de c√≥digo-fonte que voc√™ deseja compilar.
‚Ä¢ -o arquivo: Especifica o nome do arquivo de sa√≠da.

===================================================================================

Para gerar o arquivo objeto(.o) da mesma maneira descrita para arquivo execut√°vel.

> "C:\\Users\\EDUARDO_OLIVEIRA\\Documents\\aprendendoC\\C\\basico\\13_pre_processamento"
> gcc -c arquivo.c -o arquivo.o

‚Ä¢ -c: Flag que compila o c√≥digo-fonte sem gerar o execut√°vel, apenas o (.o).

===================================================================================

‚ö† Cuidados com Nomes de Arquivos e Diret√≥rios

√â fundamental usar nomes de arquivos simples e sem espa√ßos, especialmente em C/C++
devido a sua sensibilidade. Quando o nome do arquivo cont√©m espa√ßos, o compilador pode
interpret√°-lo incorretamente como m√∫ltiplos arquivos a serem compilados. Isso pode gerar erros
dif√≠ceis de identificar.

Importante:

- Evite espa√ßos nos nomes dos arquivos e diret√≥rios. Use nomes como arquivo_c.c ou arquivoC.c.
Pois no momento de compilar no terminal e caso se estiver (gcc arquivo c.c -o nome) o
compilador poder√° entender que h√° 2 arquivos a ser compilados, no caso "arquivo"(pode n√£o ter
uma extens√£o, mas √© entendido como arquivo.txt) e "c.c"

- E cuidado com a sobrescri√ß√£o de arquivos: Tenha cuidado para n√£o sobrescrever arquivos 
importantes com a flag -o para com o arquivo de sa√≠da.

-----------------------------------

OBS.: O processo de compila√ß√£o √© composto por diversas etapas, cada uma com papel fundamental na
transforma√ß√£o do c√≥digo-fonte em um programa execut√°vel. Com o uso adequado de diretivas e flags
(que ainda h√° muitas a ser explorada), podemos est√° otimizando, condicionando e modulando
seu c√≥digo conforme necess√°rio.

-----------------------------------

IMPORTANTE:
Dominar ponteiros, diretivas de pr√©-processamento e compila√ß√£o √© essencial para
qualquer desenvolvedor C/C++. E tendo o Linux como Sistema Operacional, esse aprendizado se
intensifica ainda mais, tendo diretamente acesso ao c√≥digo de m√°quina(assembly), flags 
para visualizar a linguagem assembly, bin√°rios, aproximando voc√™ do verdadeiro poder da 
programa√ß√£o de baixo n√≠vel, apesar do Windows ter ferramentas para isso, Linux √© mais 
convencional.
