‚öôÔ∏è Flags de Compila√ß√£o

Flags de compila√ß√£o s√£o par√¢metros usados para configurar o comportamento do compilador
durante o processo de compila√ß√£o. Elas permitem ativar ou desativar recursos espec√≠ficos,
controlar a verifica√ß√£o de condi√ß√µes, ou definir o tipo de sa√≠da gerada pelo compilador.

Por exemplo:
‚óè Flags de ativa√ß√£o: Ativam funcionalidades ou otimiza√ß√µes espec√≠ficas.
‚óè Flags de verifica√ß√£o: Habilitam verifica√ß√µes adicionais, como an√°lise de erros ou warnings.
‚óè Flags de sa√≠da: Controlam o formato da sa√≠da do compilador (por exemplo, gerar um execut√°vel
ou apenas o c√≥digo objeto).

Essas flags tornam o processo de compila√ß√£o mais flex√≠vel e ajudam a personalizar
como o c√≥digo √© constru√≠do.

---------------------------------

** üì∂ FLAGS DE EXIBI√á√ÉO **

> gcc arquivo.c -E:
- Exibe o c√≥digo depois do pr√©-processamento (expans√£o de macros, inclus√£o de cabe√ßalhos, etc.), 
mas n√£o compila o c√≥digo.

> gcc arquivo.c -S:
- Gera o c√≥digo Assembly. √â √∫til se voc√™ deseja estudar como o compilador traduziu seu c√≥digo-fonte 
em c√≥digo de baixo n√≠vel.

> gcc -c arquivo.c:
- Gera apenas o c√≥digo objeto (.o), sem gerar um execut√°vel. Isso √© √∫til se voc√™ est√° fazendo
compila√ß√£o modular, onde os arquivos objeto s√£o linkados posteriormente.

> gcc arquivo.c -o:
- Define o nome do arquivo de sa√≠da. A flag -o √© usada para especificar o nome do arquivo 
gerado, seja um execut√°vel ou outro tipo de arquivo.

> gcc -E <file> -o <output processed file>.i
- Cria um arquivo .i contendo o c√≥digo-fonte ap√≥s o pr√©-processamento. Isso pode ser √∫til
para estudar a forma como o pr√©-processamento foi realizado.

> gcc -E -P main.c -o main.i
- Aqui, o c√≥digo ainda √© pr√©-processado, mas sem as diretivas de inclus√£o (como #include),
o que pode ser √∫til quando voc√™ quer ver como as macros s√£o expandidas sem se preocupar 
com as depend√™ncias de cabe√ßalhos externos.

> gcc arquivo.c -g ou -ggdb
- Adiciona informa√ß√µes de depura√ß√£o ao seu programa. O -g inclui informa√ß√µes b√°sicas 
de depura√ß√£o, enquanto o -ggdb adiciona mais informa√ß√µes espec√≠ficas para o GDB.

> gcc -static main.cpp -o build
- Compila o programa com bibliotecas est√°ticas (em vez de din√¢micas). O execut√°vel 
resultante n√£o depende de bibliotecas externas e pode ser mais "port√°til".

---------------------------------

**üöÄ FLAGS DE OTIMIZA√á√ÉO **

As otimiza√ß√µes controlam como o compilador tenta melhorar o desempenho ou reduzir o tamanho
do c√≥digo gerado. As op√ß√µes mais comuns s√£o:

-O0: Desativa todas as otimiza√ß√µes. √ötil para depura√ß√£o, pois o c√≥digo gerado √© mais pr√≥ximo
do c√≥digo-fonte original.

-O1: Ativa otimiza√ß√µes b√°sicas para melhorar a performance sem aumentar muito o tempo de compila√ß√£o.

-O2: Ativa otimiza√ß√µes mais agressivas para melhorar a performance. √â uma escolha padr√£o para
a maioria dos programas em produ√ß√£o.

-O3: Aplica as otimiza√ß√µes do -O2 e adiciona otimiza√ß√µes agressivas (como vetoriza√ß√£o e
unrolling de loops). Ideal para c√≥digo de alto desempenho, mas pode aumentar o tamanho do c√≥digo.

-Os: Otimiza para reduzir o tamanho do bin√°rio gerado. √ötil para sistemas embarcados ou
para quando voc√™ precisa de um arquivo execut√°vel menor.

---------------------------------

** ‚ö† FLAGS DE AVISO **

Essas flags ajudam a identificar potenciais problemas no c√≥digo, como falhas de l√≥gica,
inconsist√™ncias e m√°s pr√°ticas.

- Wall: Ativa a maioria dos avisos importantes, mas n√£o todos. √â uma boa pr√°tica usar,
pois ajuda a detectar problemas comuns no c√≥digo.

- Wextra: Ativa avisos adicionais al√©m dos ativados por -Wall. Pode incluir avisos sobre
constru√ß√µes do c√≥digo que n√£o s√£o necessariamente erros, mas que podem ser problem√°ticas.

- Wshadow: Emite um aviso quando uma vari√°vel local "sombra" (ou oculta) outra vari√°vel com
o mesmo nome em um escopo diferente. Esse tipo de erro pode ser dif√≠cil de detectar.

- Wconversion: Avisa quando h√° convers√µes de tipos impl√≠citas que podem resultar em perda
de dados ou comportamento inesperado (por exemplo, convers√£o de float para int).

- Wpedantic: Garante conformidade rigorosa com o padr√£o da linguagem C (ISO/IEC). Emite
avisos sobre qualquer viola√ß√£o do padr√£o.

- fopenmp: Habilita o suporte ao OpenMP, que √© uma API para programa√ß√£o paralela. Usado
quando voc√™ deseja dividir seu c√≥digo para ser executado em m√∫ltiplos n√∫cleos de processadores.

---------------------------------

** ‚öô FLAGS DE PADR√ÉO (STDC) **

Essas flags controlam a vers√£o do padr√£o C que o compilador deve seguir. Elas garantem que o c√≥digo seja compat√≠vel com uma vers√£o espec√≠fica da linguagem C.

-std=c89 ou -std=c90: Segue o padr√£o ANSI C de 1989/1990. √â √∫til quando se precisa garantir a compatibilidade com vers√µes muito antigas do compilador.

-std=c99: Utiliza o padr√£o C99, que introduziu novos recursos como vari√°veis declaradas em qualquer lugar (n√£o s√≥ no in√≠cio da fun√ß√£o), novos tipos de dados (como long long), entre outras melhorias.

-std=c11: Utiliza o padr√£o C11, que trouxe melhorias como suporte nativo a threads (programa√ß√£o concorrente), al√©m de novos recursos de otimiza√ß√£o.

-std=c17 ou -std=c18: Vers√µes mais recentes do C11, com algumas corre√ß√µes de bugs e pequenas melhorias.

---------------------------------

** ‚öôÔ∏è FLAGS DE WARNING AVAN√áADAS (GCC Diagnostic) **

Essas flags permitem uma verifica√ß√£o mais aprofundada do seu c√≥digo e podem ajudar a identificar comportamentos err√¥neos ou potencialmente perigosos:

- Wuninitialized: Avisa quando uma vari√°vel pode ser usada sem ter sido inicializada. √â √∫til para detectar bugs que podem ser dif√≠ceis de encontrar.

- Wmaybe-uninitialized: Avisa quando o compilador n√£o pode garantir que uma vari√°vel foi inicializada corretamente, especialmente em fluxos de controle complexos.

- Winit-self: Avisa quando uma vari√°vel √© inicializada com ela mesma, o que √© geralmente um erro de programa√ß√£o.

---------------------------------

üë®üèª‚Äçüíª Exemplos Pr√°ticos de Combina√ß√µes de Flags

As flags podem ser usadas isoladamente ou combinadas isso conforme a necessidade para criar
conjuntos que otimizam a compila√ß√£o, melhoram a depura√ß√£o e garantem a qualidade do c√≥digo
de forma consistente.

‚óè üë®üèª‚Äçüíª Pode-se construir flags para desenvolvimento

> gcc arquivo.c -Wall -Wextra -g -o programa
- querer ver todos os avisos e erros do c√≥digo e facilitar a depura√ß√£o

> gcc arquivo.c -O2 -o programa
- quando j√° n√£o precisa tanto de avisos e quer gerar um execut√°vel otimizado

> gcc arquivo.c -std=c99 -Wall -o programa
- Para garantir a conformidade com um padr√£o mais antigo

---------------------------------

‚óè üë®üèª‚Äçüíª Cria√ß√£o de Conjuntos de Flags

> gcc arquivo.c -Wall -Wextra -Wshadow -Wconversion -Wpedantic -g -o programa

- Conjunto para desenvolvimento e depura√ß√£o: Este conjunto ativa todos os avisos importantes
e adiciona informa√ß√µes de depura√ß√£o, facilitando a identifica√ß√£o de problemas.

> gcc arquivo.c -O2 -Werror -std=c11 -o programa

- Conjunto para produ√ß√£o e otimiza√ß√£o: Aqui, o foco est√° em otimizar o c√≥digo para performance,
com a desativa√ß√£o de warnings para n√£o sobrecarregar o processo e o tamanho do c√≥digo.

> gcc arquivo.c -std=c11 -Wuninitialized -Wmaybe-uninitialized -Wpedantic -Wshadow -Wconversion -o programa

- Conjunto para garantir padr√µes e qualidade: Esse conjunto foca em garantir que o c√≥digo
seja escrito conforme os padr√µes e que n√£o haja problemas de inicializa√ß√£o de vari√°veis,
com flags para fazer o c√≥digo aderir estritamente ao padr√£o C11.

------------------------------------------------------

‚óè üë®üèª‚Äçüíª Cria√ß√£o de Conjuntos de Flags com makefile e Cria√ß√£o de Conjuntos de Flags com scripts

- Um script √© basicamente um arquivo de texto que guarda comandos que voc√™ normalmente
digitaria no terminal. Ele guarda o comando gcc para compilar o programa.

- Um Makefile √© um arquivo especial usado pelo comando make para automatizar a compila√ß√£o
de projetos maiores. Ele entende depend√™ncias entre arquivos e s√≥ recompila o que mudou.

--------------------------------------------------------------------------------------------------
| M√©todo   | Quando Usar                                    | Vantagens                          |
--------------------------------------------------------------------------------------------------
| Script   | Projetos pequenos ou r√°pidos                   | Simples e r√°pido de criar e usar   |
--------------------------------------------------------------------------------------------------
| Makefile | Projetos m√©dios ou grandes com muitos arquivos | Organiza e compila s√≥ o necess√°rio | 
--------------------------------------------------------------------------------------------------

E assim sucessivamente(existem v√°rias flags que voc√™ poder√° captar ao decorrer de seu ensino,
aqui eu citei apenas para os mais conhecidos e para se ter uma base).
Esse √© o poder da compila√ß√£o em C/C++: voc√™ praticamente conversa diretamente com a m√°quina, 
dizendo o que ela deve fazer e como deve fazer.
