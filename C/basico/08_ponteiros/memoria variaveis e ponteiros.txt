ENTENDENDO COMO FUNCIONA
-------------------------------

## üìå Introdu√ß√£o

Tudo em um programa √© captado e manipulado diretamente na **mem√≥ria RAM**.
Quando declaramos vari√°veis ou usamos ponteiros, estamos, na verdade, interagindo com
endere√ßos de mem√≥ria, que est√£o muito bem abstra√≠dos (para melhor compreens√£o e facilidade),
pois imagine como seria manipular v√°rios valores sem nomes, apenas por n√∫meros de mem√≥ria?
Seria como tentar lembrar o que est√° em cada gaveta de um arm√°rio com milhares de compartimentos
sem r√≥tulos, apenas n√∫meros! As linguagens de programa√ß√£o cuidam dessa complexidade para n√≥s, 
permitindo que trabalhemos com nomes de vari√°veis em vez de endere√ßos num√©ricos brutos.
-------------------------------

## ‚ùì O que acontece na mem√≥ria?

Ao declarar uma vari√°vel, como `int x = 10;`, o compilador reserva um espa√ßo na RAM para 
armazenar o n√∫mero 10, como sabemos 4 bytes, obtendo ent√£o um espa√ßo que tem um 
**endere√ßo √∫nico**, e com isso podemos acess√°-lo com o operador `&x`.

- int x = 10;
-----------------------
| endere√ßo | conte√∫do |
-----------------------
| 0x1040   | 00001010 | <- valor 10
-----------------------
| 0x1044   |          |
-----------------------
| 0x1048   |          |
-----------------------
| 0x1052   |          |
-----------------------

## üí≠ CURIOSIDADE: Perceba que vai pulando de 4 em 4, se deve ao fato de um int (4 bytes)
a l√≥gica se aplica a todos os tipos de dados, por√©m que varia de acordo com sua ocupa√ß√£o na mem√≥ria
-------------------------------

## ‚ùì E o ponteiro?

O ponteiro √© uma vari√°vel especial recebendo os mesmos atributos de uma vari√°vel qualquer
(endere√ßo, nome, e um valor), mas com uma pequena diferen√ßa em vez de armazenar diretamente
um valor, ela armazena o endere√ßo de mem√≥ria onde o valor est√° localizado. 
Isso permite manipular dados de uma forma mais flex√≠vel e eficiente, principalmente ao trabalhar 
com grandes estruturas de dados ou em fun√ß√µes onde precisamos alterar diretamente o valor de vari√°veis.

- int x = 10;
- int *p = &x; // Declarando e passando o endere√ßo de 'x' para o ponteiro que agora
    
    int *p                                                  int x
-----------------------                               -----------------------
| endere√ßo | conte√∫do |                               | endere√ßo | conte√∫do |
-----------------------                               -----------------------
| 0x1050   | 0x1040   | p aponta para o endere√ßo de x | 0x1040   | 00001010 | <- valor 10
-----------------------                               -----------------------
| 0x1054   |          |                               | 0x1044   |          |
-----------------------                               -----------------------
| 0x1058   |          |                               | 0x1048   |          |
-----------------------                               -----------------------
| 0x1062   |          |                               | 0x1052   |          |
-----------------------                               -----------------------        

Com este pequeno trecho espero deixar claro e objetivo o exemplo de demonstra√ß√£o da organiza√ß√£o 
e funcionamento de mem√≥ria em vari√°veis e ponteiros, bem acontece que o ponteiro `p`
obt√©m o endere√ßo de `x` estando localizado no endere√ßo 0x1050, ou seja, 0x1050 armazena 
o endere√ßo 0x1040.

-------------------------------
